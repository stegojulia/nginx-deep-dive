user nginx nginx;
worker_processes auto;
worker_rlimit_nofile 1024;

# Load ModSecurity dynamic module
load_module /etc/nginx/modules-enabled/ngx_http_modsecurity_module.so;

events {

worker_connections 2048;

}

http {
 # include conf.d/example.com.conf;
  
  log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"http_user_agent" "$http_x_forwarded_for"';

  log_format vhost '$host $remote_addr - $remote_user [$time_local] "$request"'
                   '$status $body_bytes_sent "$http_referer" '
                    '"http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;

  gzip on;
  gzip_types text/plain text/css application/x-javascript application/javascript text/xml application/xml application/xml+rss text/javascript image/x-icon image/bmp image/svg+xml;
  gzip_disable msie6;
  gzip_proxied no-cache no-store private expired auth;
  gzip_min_length 1024;
  gzip_vary on;

  gunzip on;

  include conf.d/photos.example.com.conf;
  include conf.d/blog.example.com.conf;
 
  server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 ssl http2;
    server_name _;
    root /usr/share/nginx/html;

    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsecurity/modsecurity.conf;
    
    ssl_certificate /etc/nginx/ssl/public.pem;
    ssl_certificate_key /etc/nginx/ssl/private.key;
    
    rewrite ^(/.*)\.html(\?.*)?$ $1$2 redirect;
    rewrite ^/(/*)/$ /$1 redirect;    
    
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m; # m = mb
    ssl_session_tickets off; # everything kept on the server

    ssl_protocols TLSv1.2; # here you specify what is supported
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on; # moving everything to the server-side

    add_header Strict-Transport-Security max-age=15768000; # hsts http strict server security - tells our servers (the entire domain) they have to communicate via https. For the next 6 months it shouldn't allow any requests to port 80

    ssl_stapling on;
# ocsp stapling (online certificate status protocol - making request to the certificate authority to validate)

    location / {
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    location = /admin {
      auth_basic "Login Required";
      auth_basic_user_file /etc/nginx/.htpasswd;
      try_files $uri/index.html $uri.html $uri/ $uri =404;
    }

    error_page 404 /404.html;
    error_page 500 501 502 503 504 /50x.html;
  }   
}

